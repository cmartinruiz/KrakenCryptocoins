# -*- coding: utf-8 -*-
"""Kraken_Viualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14JHJoh-fvFMkFMBs5vHFsyovqi9CwnsU
"""

from dash import Dash, dcc, html, Input, Output
import dash_bootstrap_components as dbc
import plotly.graph_objs as go
import pandas as pd
from data_processing import fetch_top_coins, bollinger_bands

# Fetch initial data
since_date = 1672531200  # "2023-01-01"
kraken_1440, kraken_60 = fetch_top_coins(since_date)

# Initialize Dash app
app = Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])

app.layout = html.Div([
    # Your Dash layout as defined in your script
])

@app.callback(
    [Output('cryptocurrency-chart', 'figure'),
     Output('bollinger-chart', 'figure')],
    [Input('coin-dropdown', 'value'),
     Input('yaxis-column', 'value'),
     Input('interval-dropdown', 'value'),
     Input('date-picker-range', 'start_date'),
     Input('date-picker-range', 'end_date')]
)
def update_charts(selected_coins, y_column, interval, start_date, end_date):
    start_date = pd.to_datetime(start_date)
    end_date = pd.to_datetime(end_date)
    filtered_df = kraken_60 if interval == '60' else kraken_1440
    filtered_df = filtered_df[filtered_df['Coin'].isin(selected_coins)]
    filtered_df = filtered_df[(filtered_df['time'] >= start_date) & (filtered_df['time'] <= end_date)]
    filtered_df['time'] = pd.to_datetime(filtered_df['time'])

    main_chart, bollinger_chart = {}, {}
    # Implement your main and Bollinger band charts as in your script

    return main_chart, bollinger_chart

if __name__ == "__main__":
    app.run_server(debug=True)