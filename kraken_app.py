# -*- coding: utf-8 -*-
"""Kraken_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14JHJoh-fvFMkFMBs5vHFsyovqi9CwnsU
"""

# visualization_app.py

import pandas as pd
import numpy as np
import itertools
from itertools import cycle
import plotly.graph_objs as go
from dash import Dash, dcc, html, Input, Output
import dash_bootstrap_components as dbc
from Kraken_Data import fetch_top_coins  # Importing the data-fetching function

# Load the pre-fetched data from CSV files
kraken_1440 = pd.read_csv("kraken_1440.csv", parse_dates=["time"])
kraken_60 = pd.read_csv("kraken_60.csv", parse_dates=["time"])

# Ensure the data is properly parsed for time values
kraken_1440['time'] = pd.to_datetime(kraken_1440['time'])
kraken_60['time'] = pd.to_datetime(kraken_60['time'])

# Define a helper function for Bollinger Bands
def bollinger_bands(data, window=20):
    data['mean'] = data['close'].rolling(window).mean()
    data['std'] = data['close'].rolling(window).std()
    data['upper_band'] = data['mean'] + (data['std'] * 2)
    data['lower_band'] = data['mean'] - (data['std'] * 2)
    data['buy_signal'] = np.where(data['close'] < data['lower_band'], 1, 0)
    data['sell_signal'] = np.where(data['close'] > data['upper_band'], 1, 0)
    return data

# Define Dash app with a dark theme
app = Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])

# App layout
app.layout = dbc.Container(
    [
        # Header Section
        dbc.Row(
            [
                dbc.Col(
                    html.Div(
                        [
                            html.Label("Coins selected", style={"font-weight": "bold", "color": "dimgray"}),
                            dcc.Dropdown(
                                id="coin-dropdown",
                                options=[{'label': coin, 'value': coin} for coin in kraken_1440['Coin'].unique()],
                                value=[kraken_1440['Coin'].iloc[0]],  # Default to the first coin
                                multi=True,
                                style={'backgroundColor': '#FFFFFF', 'color': '#6c757d'}
                            ),
                        ]
                    ),
                    width=4,
                ),
                dbc.Col(
                    html.Div(
                        [
                            html.Label("Values", style={"font-weight": "bold", "color": "dimgray"}),
                            dcc.Dropdown(
                                id="yaxis-column",
                                options=[{'label': col, 'value': col} for col in kraken_1440.columns if col not in ['time', 'Coin', 'vwap', 'count']],
                                value='close',
                                style={'backgroundColor': '#FFFFFF', 'color': '#6c757d'}
                            ),
                        ]
                    ),
                    width=4,
                ),
                dbc.Col(
                    html.Div(
                        [
                            html.Label("Interval", style={"font-weight": "bold", "color": "dimgray"}),
                            dcc.Dropdown(
                                id="interval-dropdown",
                                options=[
                                    {'label': 'Daily (24h)', 'value': '1440'},
                                    {'label': 'Hourly (1h)', 'value': '60'},
                                ],
                                value='1440',  # Default interval
                                style={'backgroundColor': '#FFFFFF', 'color': '#6c757d'}
                            ),
                        ]
                    ),
                    width=4,
                ),
            ],
            justify="around",
            style={"marginBottom": "20px"},
        ),

        # Date Picker Range
        dbc.Row(
            dbc.Col(
                html.Div(
                    [
                        dcc.DatePickerRange(
                            id='date-picker-range',
                            start_date=kraken_1440['time'].min().strftime('%Y-%m-%d'),
                            end_date=kraken_1440['time'].max().strftime('%Y-%m-%d'),
                            display_format='YYYY-MM-DD',
                            style={
                                'backgroundColor': '#F5F5F5',
                                'color': '#6c757d',
                                'padding': '10px',
                                'width': '100%',
                            },
                            day_size=30
                        ),
                    ]
                ),
                width=4,
            ),
            justify="end",
            style={"marginBottom": "20px"},
        ),

        # Main Chart and Bollinger Band Chart
        dbc.Row(
            [
                dbc.Col(
                    dcc.Graph(id="cryptocurrency-chart", config={'displayModeBar': False}),
                    width=6,
                ),
                dbc.Col(
                    dcc.Graph(id="bollinger-chart", config={'displayModeBar': False}),
                    width=6,
                ),
            ]
        ),
    ],
    fluid=True,
    style={'backgroundColor': '#F5F5F5', 'padding': '20px'},
)

# Callback to update charts
@app.callback(
    [Output('cryptocurrency-chart', 'figure'),
     Output('bollinger-chart', 'figure')],
    [
        Input('coin-dropdown', 'value'),
        Input('yaxis-column', 'value'),
        Input('interval-dropdown', 'value'),
        Input('date-picker-range', 'start_date'),
        Input('date-picker-range', 'end_date'),
    ]
)
def update_charts(selected_coins, y_column, interval, start_date, end_date):
    start_date = pd.to_datetime(start_date)
    end_date = pd.to_datetime(end_date)

    # Filter data based on interval
    filtered_df = kraken_60 if interval == '60' else kraken_1440
    filtered_df = filtered_df[filtered_df['Coin'].isin(selected_coins)]
    filtered_df = filtered_df[(filtered_df['time'] >= start_date) & (filtered_df['time'] <= end_date)]

    # Main Chart
    traces = []
    for coin in selected_coins:
        coin_df = filtered_df[filtered_df['Coin'] == coin]
        traces.append(
            go.Scatter(
                x=coin_df['time'],
                y=coin_df[y_column],
                mode='lines',
                name=f"{coin} {y_column.capitalize()}",
            )
        )

    main_chart = {
        'data': traces,
        'layout': go.Layout(
            title=f"Cryptocurrency {y_column.capitalize()} over Time",
            xaxis=dict(title="Time"),
            yaxis=dict(title=y_column.capitalize()),
            paper_bgcolor='#F5F5F5',
            plot_bgcolor='#F5F5F5',
            font=dict(color='dimgray'),
        ),
    }

    # Bollinger Bands
    if len(selected_coins) == 1:
        single_coin_df = filtered_df[filtered_df['Coin'] == selected_coins[0]]
        single_coin_df = bollinger_bands(single_coin_df)

        bollinger_chart = {
            'data': [
                go.Candlestick(
                    x=single_coin_df['time'],
                    open=single_coin_df['open'],
                    high=single_coin_df['high'],
                    low=single_coin_df['low'],
                    close=single_coin_df['close'],
                    name='Candlestick',
                ),
                go.Scatter(
                    x=single_coin_df['time'],
                    y=single_coin_df['upper_band'],
                    mode='lines',
                    name='Upper Band',
                ),
                go.Scatter(
                    x=single_coin_df['time'],
                    y=single_coin_df['lower_band'],
                    mode='lines',
                    name='Lower Band',
                ),
                go.Scatter(
                    x=single_coin_df['time'],
                    y=single_coin_df['mean'],
                    mode='lines',
                    name='Mean',
                ),
            ],
            'layout': go.Layout(
                title=f"Bollinger Bands for {selected_coins[0]}",
                xaxis=dict(title="Time"),
                yaxis=dict(title="Price"),
                paper_bgcolor='#F5F5F5',
                plot_bgcolor='#F5F5F5',
                font=dict(color='dimgray'),
            ),
        }
    else:
        bollinger_chart = {
            'data': [],
            'layout': go.Layout(
                title="Select a single coin to view Bollinger Bands",
                paper_bgcolor='#F5F5F5',
                plot_bgcolor='#F5F5F5',
                font=dict(color='dimgray'),
            ),
        }

    return main_chart, bollinger_chart


if __name__ == "__main__":
    app.run_server(debug=True)